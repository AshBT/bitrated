extend ./template/layout

append title
  | - Security policy

block content
  .container-page
    :markdown
      ## Security policy
      We take security very seriously, and desgined the service architecture with security
      in mind from the ground up. 

      Those are the security measures we take:
      
      #### SSL encryption
      To prevent MITM attacks, all data communitation is encrypted with 256-bit SSL.
      This is the industry standard for encrypting communication.

      #### Client-side app

      For improved security and privacy, we try to minimize the data that has to be shared
      with the server by managing most of the arbitration process in your browser using
      client-side technology. In particular:

      - Private keys are created and used in your browser, and are **never sent to or proccessed by our servers**.
      - The transaction terms are stored in the hash portion of the URL, and are never sent to our servers.

      Some data is sent to the server or stored temporarily in order to enable communication
      between users. This is kept to the absolute required minimum, and the data is not of
      sensitive nature. The data that is sent is:

      - During the initial keys/signature exhchange, the party that joins the arbitration
        sends his ***public* key**, his **signature** and the **triple-SHA256 of the multisig
        script** (to verify both parties ended up with the same script, without revealing that to the server).
        The data is sent immediately to the other party, and *no permenent copy is ever saved*.
      - When a transaction is created, the partially signed **transaction** is sent and
        stored on the server for up to 24 hours (or until its deleted), and can be read by
        both parties and the arbitrator.
        This is the same transaction that later becomes part of the blockchain, and thus
        *mostly considered public information*.
      - To check if a public key is associated with a registered user and display additional information,
        we send the **triple-SHA256 of his public key** to our servers. This allows us to check
        if it exists on our index, *without revealing the actual public key* if its not.

      In addition to that, some data is shared with third parties:

      - To load the multisig balance and unspent inputs, the **multisig address** is sent to
        [blockchain.info api](https://blockchain.info/api/blockchain_api) (over SSL).
      - The final **transactions** is broadcasted to the Bitcoin network using the
        [blockchain.info pushtx service](https://blockchain.info/pushtx) (over SSL).

      Except for those cases, nothing else is sent to the server during the arbitration process.
      The arbitration data (including the transaction terms) is stored in
      the hash portion of the URL, which is *not* sent to the server during http requests,
      and is only accessible to you and people you choose to share URLs with.

      Whenever we display URLs, we clearly state who it should be shared with and what
      data it contains.
      URLs that contain your private key are always marked with "DO-NOT-SHARE".
      
      **You are responsible for keeping a safe and secure backup of your URL.
      The data contained in the URL is cryptographically required for releasing
      the funds, and cannot be recovered by any means.**

      #### Browser extension
      <div class="alert alert-info">
      
      The browser extension is still work in progress.
      Due do the importance of the extension, the website will
      remain in beta stage until this is operational.
      
      The text below describes how it will work once ready.

      </div>

      Our browser extension provides improved security by verifying the integrity
      of the files served by the server. The verification is done using two factors:

      - **Cold storage signature verification:**
        In addition to SSL, static files (html/css/javascript)
        are signed using standard Bitcoin message signatures
        (the private key is stored encrypted and offline).
        This ensures that the content served from the webserver was not tampered
        with by a third party.

      - **Comparing against the code on GitHub repository:**
        The source code from the GitHub repository is built on Travis-CI,
        the resulting hashes are published publicly on Travis's job page.
        The extension ensures that the content served by the webserver matches
        the open-source repository on GitHub.

      If a potential attacker gains control over the web server, he still only has
      access to information the web server already has (which is very little).
      To get sensitive information, he would have to modify the client-side code
      to send back more data to the server.

      For an attacker to succesfully mount such an attack against someone with the
      browser extension, he would have to:

      1. Gain access to the web server.
      1. Gain access to the personal computer of a developer with commit access
         to the Github repository.
      1. Commit his changes to the public GitHub repository, where they
         can be seen by anyone.
      1. Gain **physical access** to the offline machine with the private key.

      For users without the extension, an attacker only has to do step (1).

      It is highly recommended to install the extension.

      <a class="btn btn-primary" href="#TODO">Install extension</a>

      #### Public key verification
      To prevent an attacker from modifying our published Bitcoin public key,
      its permanently embedded into Bitcoin blockchain in a way that is
      [nearly impossible](https://en.bitcoin.it/wiki/Weaknesses#Attacker_has_a_lot_of_computing_power)
      to modify (and becomes exponentially more difficult as time goes by).

      The public key can be verified by taking the following procedure:

      1. Take the SHA256 of the domain name ("bitrated.com")
      2. Create a Bitcoin address using that hash as the private key
      3. Find the **first** transaction with that address as its *output address*
      4. The *input address* of that transaction is our public key

      If its ever required to change the public key, the announcement
      will be signed with the old public key.

    :markdown
      #### Local private keys support
      For improved security, you can generate your keys locally and provide our interface
      with your *public key* only.
      When your signature is required, you'll be given instructions for signing
      locally using the bitcoind/bitcoin-qt api and be asked to provide the
      signature.
      
      To create a key pair with Bitcoind and get the public key, issue the following commands:

          $ bitcoind getnewaddress # creates a key pair and returns the Bitcoin address
          $ bitcoind validateaddress [NEW-ADDRESS] # returns information for the address
          or, combined: $ bitcoind validateaddress `bitcoind getnewaddress`

      This should return some information about the address in JSON format.
      Look for the public key line with `"pubkey" : "[public key here]"`.

      When a key is requested, replace the automatically generated private key with
      your public key. If you're starting a transaction, you should also import the
      multisig address to your local wallet (the command is available on the multisig
      page).


      #### No external scripts
      Everything is loaded from the web server over SSL.
      We don't use any CDNs, never load data with JSONP (which allows executing
      arbitrary code), or even use an analytics service.

      This prevents third party domains from serving mailicious code
      and have it executed under the context of the domain, possibly
      giving them access to sensitive information.

      #### Open source
      This website is [open sourced](TODO) under the MIT license, and can be audited
      by anyone with technical background.

      #### Bug bounty
      We welcome security audits and offer a bounty of 1 BTC for responsibly disclosing
      security issues or breaches in our client-server model.
      If you found a bug, please contact us at [security@bitrated.com](mailto:security@bitrated.com).

      At the time of writing, the BTC/USD exchange rate is ~$110.
      If this drastically changes (to either side) we'll pay the
      equivalent BTC of that instead.

